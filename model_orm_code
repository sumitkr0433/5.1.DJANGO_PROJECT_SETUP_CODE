from django.db import models
# Create your models here.
class Reporter(models.Model):
	full_name = models.CharField(max_length=70)
	def __str__(self):
		return self.full_name

class Article(models.Model):
	pub_date = models.DateField()
	headline = models.CharField(max_length=200)
	content = models.TextField()
	reporter = models.ForeignKey(Reporter, on_delete=models.CASCADE)
	def __str__(self):
		return self.headline
    
========================================================================================================================================================
$ python manage.py makemigrations
$ python manage.py migrate
========================================================================================================================================================
(first_project) admin1@admin1-Latitude-3400:~/Django_project/1.django_documentation_project/first_project$ python manage.py shell
# Import the models we created from our "first_app" app
>>>from first_app.models import Article, Reporter
# No reporters are in the system yet.
>>> Reporter.objects.all()
<QuerySet []>
=======================================================================================================================================================
converting the orm to sql
>>> Reporter.objects.all()
<QuerySet [<Reporter: John Smith>]>
>>> queryset = Reporter.objects.all()
>>> str(queryset.query)
'SELECT "first_app_reporter"."id", "first_app_reporter"."full_name" FROM "first_app_reporter"'
>>> 
=======================================================================================================================================================
# Create a new Reporter.
>>> r = Reporter(full_name='John Smith')
# Save the object into the database. You have to call save() explicitly.
>>> r.save()
# Now it has an ID.
>>> r.id
1
---------------------------------------------------------------------------------------------------------------------------------------------------
# Now the new reporter is in the database.
>>> Reporter.objects.all()
<QuerySet [<Reporter: John Smith>]>
# Fields are represented as attributes on the Python object.
>>> r.full_name
'John Smith'
# Django provides a rich database lookup API.
>>> Reporter.objects.get(id=1)
<Reporter: John Smith>
>>> Reporter.objects.get(full_name__startswith='John')
<Reporter: John Smith>
>>> Reporter.objects.get(full_name__contains='mith')
<Reporter: John Smith>
>>> Reporter.objects.get(id=2)
Traceback (most recent call last):
...
DoesNotExist: Reporter matching query does not exist.
=======================================================================================================================================================
Article query
-------------------------------------------------------------------------------------------------------------------------------------------------------
# Create an article.
>>>print(r)
John Smith
>>> from datetime import date
>>> a = Article(pub_date=date.today(), headline='Django is cool',content='Yeah.', reporter=r)
>>> a.save()
------------------------------------------------------------------------------------------------------------------------------------------------------
# Now the article is in the database.
>>> Article.objects.all()
<QuerySet [<Article: Django is cool>]>

# Article objects get API access to related Reporter objects.
>>> r = a.reporter
>>> r.full_name
'John Smith'
>>> a = Article(pub_date=date.today(), headline='Django is cool',content='Yeah.', reporter=r)
>>> a.save()
>>> Article.objects.all()
<QuerySet [<Article: Django is cool>]>
>>> m = a.reporter
>>> print(m)
John Smith
>>> m.fullname
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Reporter' object has no attribute 'fullname'
>>> m.full_name
'John Smith'
>>> 
# And vice versa: Reporter objects get API access to Article objects.
>>> r.article_set.all()
<QuerySet [<Article: Django is cool>]>
---------------------------------------------------------------------------------------------------------------------------------------------------------
# The API follows relationships as far as you need, performing efficient
# JOINs for you behind the scenes.
# This finds all articles by a reporter whose name starts with "John".
>>> Article.objects.filter(reporter__full_name__startswith='John')
<QuerySet [<Article: Django is cool>]>
========================================================================================================================================================
# Change an object by altering its attributes and calling save().
>>> # And vice versa: Reporter objects get API access to Article objects.
>>> r.save()
# Delete an object with delete().
>>> r.delete()
=======================================================================================================================================================
