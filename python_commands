mkdir auth
cd auth
pipenv install django==2.1
pipenv shell
django-admin startproject finesauces_project .
django-admin startpp app_name
========================================================================================================================================================
mkdir env
virtualenv env/bookmarks
source env/bookmarks/bin/activate
pip install Django==2.0.5
django-admin startproject bookmarks
django-admin startapp account
========================================================================================================================================================
mkdir django_social_website
cd django_social_website
pipenv install django==2.1
pipenv shell
django-admin startproject bookmarks .
django-admin startapp account
======================================================================================================================================================
INSTALLED_APPS = [
    'account.apps.AccountConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]
====================================================================================================================================================
python manage.py makemigrations
python manage.py migrate
python manage.py createsuperuser
=====================================================================================================================================================
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
=========================================================================================================================================================
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
STATIC_ROOT = os.path.join(BASE_DIR, 'assets')
----------------------------------------------------------------------------------------------------------------------------------------------------------
python manage.py collectstatic
120 static files copied to '/home/admin1/Django_project/school/assets'.
=========================================================================================================================================================
Bootstrap setting

pipenv install django-crispy-forms==1.7.2
--------------------------------------------------------------------------------------------------------------------------------------------------------
Code
# newspaper_project/settings.py
INSTALLED_APPS = [
# Local
'users.apps.UsersConfig',
'pages.apps.PagesConfig',
#3rd Party
'crispy_forms', # new bootstrap 
'django.contrib.admin',
'django.contrib.auth',
'django.contrib.contenttypes',
'django.contrib.sessions',
'django.contrib.messages',
'django.contrib.staticfiles',
]
------------------------------------------------------------------------------------------------------------------------------------------------------
Add this line to setting.py
Code
# newspaper_project/settings.py
CRISPY_TEMPLATE_PACK = 'bootstrap4'
------------------------------------------------------------------------------------------------------------------------------------------------------
Load cripsy form in template file
------------------------------------------------------------------------------------------------------------------------------------------------------
Now in our signup.html template we can quickly use crispy forms. First we load crispy_forms_tags at the top and 
then swap out {{ form.as_p }} for {{ form|crispy}} .
Code
<!-- templates/signup.html -->
{% extends 'base.html' %}
{% load crispy_forms_tags %}
{% block title %}Sign Up{% endblock title%}
{% block content %}
<h2>Sign up</h2>
<form method="post">
{% csrf_token %}
{{ form|crispy }}   ####bootstrap form
<button type="submit">Sign Up</button>
</form>
{% endblock content %}
=======================================================================================================================================================
from django.shortcuts import render, redirect
from django.contrib import messages
from django.contrib.auth.models import User, auth
# Create your views here.
def login(request):
    if request.method== 'POST':
        username = request.POST['username']
        password = request.POST['password']
        user = auth.authenticate(username=username,password=password)
        if user is not None:
            auth.login(request, user)
            return redirect("/")
        else:
            messages.info(request,'invalid credentials')
            return redirect('login')
    else:
        return render(request,'login.html')    

def register(request):

    if request.method == 'POST':
        first_name = request.POST['first_name']
        last_name = request.POST['last_name']
        username = request.POST['username']
        password1 = request.POST['password1']
        password2 = request.POST['password2']
        email = request.POST['email']
        if password1==password2:
            if User.objects.filter(username=username).exists():
                messages.info(request,'Username Taken')
                return redirect('register')
            elif User.objects.filter(email=email).exists():
                messages.info(request,'Email Taken')
                return redirect('register')
            else:   
                user = User.objects.create_user(username=username, password=password1, email=email,first_name=first_name,last_name=last_name)
                user.save();
                print('user created')
                return redirect('login')

        else:
            messages.info(request,'password not matching..')    
            return redirect('register')
        return redirect('/')
        
    else:
        return render(request,'register.html')
-------------------------------------------------------------------------------------------------------------------------------------------------------
def logout(request):
    auth.logout(request)
    return redirect('/')       
======================================================================================================================================================
 """telusko URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/2.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static


urlpatterns = [
    path('', include('travello.urls')),
    path('admin/', admin.site.urls),
    path('accounts/',include('accounts.urls'))
] 
urlpatterns = urlpatterns + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
========================================================================================================================================================
in the settings.py
--------------------------------------------------------------------------------------------------------------------------------------------------------
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR,'media')
=========================================================================================================================================================
settings.py
for postgres database
=======================================================================================================================================================
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'telusko',
        'USER': 'postgres',
        'PASSWORD': '1234',
        'HOST': 'localhost'
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------
Models.py
from django.db import models
# Create your models here.
class Destination(models.Model):
    name = models.CharField(max_length=100)
    img = models.ImageField(upload_to='pics')
    desc = models.TextField()
    price = models.IntegerField()
    offer = models.BooleanField(default=False)
 =======================================================================================================================================================
from django.shortcuts import render
from django.http import HttpResponse
# Create your views here.
def home(request):
    return render(request, "home.html", {"name": "Navin"})
def add(request):
    val1 = int(request.POST["num1"])
    val2 = int(request.POST["num2"])
    res = val1 + val2

    return render(request, "result.html", {"result": res})
 ======================================================================================================================================================
python -m django --version
python manage.py runserver 8080
$ python manage.py runserver 0:8000
0--ip address
8080 is port address
$ python manage.py sqlmigrate polls 0001
$ python manage.py migrate
Run python manage.py makemigrations to create migrations for those changes
• Run python manage.py migrate to apply those changes to the database.
python manage.py shell
0 is a shortcut for 0.0.0.0. Full docs for the development server can be found in the runserver reference.
=======================================================================================================================================================
Message framwork
{% if messages %}
{% for message in messages %}
{% if message.tags == 'info' %}
    {{message}}
    {% endif %}
    {% endfor %}
    {% endif %}
=========================================================================================================================================================
{% if messages %}
               {% for message in messages %}
               {% if message.tags == 'info' %}
                <div class="alert alert-warning alert-dismissible fade show" role="alert" id="error_show">
                  {{message}}
                  <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                  </button>
               </div>
               {% endif %}
               {% endfor %}
               {% endif %}
 <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>    
<script>
    $("#error_show").show();
    setTimeout(function() {
        $("#error_show").hide();
    }, 1200);
</script>
